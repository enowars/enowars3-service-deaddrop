RELEASE_BRANCH=	release
REPOSITORY_URL=	ssh://git@git.eno.host:7999/blue/service-messagequeue.git
RELEASE_DIR=	./new-release

.PHONY: release-clone
release-clone:
	git clone ${REPOSITORY_URL} ${RELEASE_DIR}

.PHONY: release-update
release-update:
	${MAKE} -C ${RELEASE_DIR} -f ${PWD}/Makefile do-release-update

.PHONY: do-release-update
do-release-update:
	git checkout ${RELEASE_BRANCH}
	git rm -r .

	# Service ####################################################################
	# Docker files
	git checkout --force master service/Dockerfile
	git checkout --force master service/docker-compose.yml.template
	# Build infrastructure
	git checkout --force master ${SERVICE_DIR}/Makefile
	git checkout --force master ${SERVICE_DIR}/config
	git checkout --force master ${SERVICE_DIR}/erlang.mk
	git checkout --force master ${SERVICE_DIR}/relx.config
	# Source of the service
	git checkout --force master ${SERVICE_DIR}/src

	# Checker ####################################################################
	git checkout --force master checker/Dockerfile
	git checkout --force master checker/checker.py
	git checkout --force master checker/docker-compose.yml
	git checkout --force master checker/nginx.conf
	git checkout --force master checker/requirements.txt
	git checkout --force master checker/uwsgi.ini

	env PAGER=cat git diff --staged
	git status

.PHONY: release-qa
release-qa:
	git checkout ${RELEASE_BRANCH}
	sed -i 's/TEAMID/eeee/g' ${SERVICE_DIR}/docker-compose.yml
	${MAKE} -C ${SERVICE_DIR} up
	${MAKE} -C ${SERVICE_DIR} down
	git checkout -- ${SERVICE_DIR}/docker-compose.yml

VERSION_FORMAT=	[0-9][0-9]*.[0-9][0-9]*.[0-9][0-9]*
.PHONY: release-tag
release-tag:
	${MAKE} ${RELEASE_DIR} -f ${PWD}/Makefile do-release-tag

.PHONY: do-release-tag
do-release-tag:
	@echo "Checking if new version matches \"${VERSION_FORMAT}\"..."
	@expr "${VERSION}" : '${VERSION_FORMAT}' >/dev/null || \
		{ echo "ERROR: Version \"${VERSION}\" does not match \"${VERSION_FORMAT}\"..." >&2 && false; }
	@echo "Checking if the new version is unique..."
	@git tag | grep -o -v "${VERSION}" >/dev/null || \
		{ echo "ERROR: Version \"${VERSION}\" is not unique..." >&2 && false; }
	@echo "Checking if the new version is higher than previous versions..."
	@{ git tag; echo "${VERSION}"; } | grep -o '${VERSION_FORMAT}' | sort | tail -n 1 | grep '${VERSION}' >/dev/null || \
		{ echo "ERROR: Version \"${VERSION}\" is not higher than previous versions..." >&2 && false; }
	git tag ${VERSION}
	git push --tags

.PHONY: release-push
release-push:
	${MAKE} MASTER_HASH="$$(git log -n 1 --pretty=format:"%H")" -C ${RELEASE_DIR} -f ${PWD}/Makefile do-release-push

.PHONY: do-release-push
do-release-push:
	git commit --message="Release the service (based on ${MASTER_HASH})"
	git push --set-upstream origin ${RELEASE_BRANCH}

.PHONY: release-clean
release-clean:
	rm -rf -- ${RELEASE_DIR}

.PHONY: release
release: release-clean
	${MAKE} release-clone
	${MAKE} release-update
	${MAKE} release-push
	${MAKE} release-tag
	${MAKE} release-clean

.PHONY: sync-release-to-master
sync-release-to-master:
	git checkout master
	git ls-tree -r origin/release --name-only | xargs -n 1 git checkout --force origin/release
	env PAGER=cat git diff --staged
